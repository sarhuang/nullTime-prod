-null-time-api-temp/GameTools.kt

8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400  1) /* GameTools class, all functions needed by the server
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400  2)  * to keep track of all games and cards
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400  3)  */
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400  4) 
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400  5) package null-time-api-temp
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400  6) 
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400  7) class GameTools {
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400  8) 
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400  9)   val games : MutableMap<String, Instance>
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 10) 
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 11)   constructor() {
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 12)     val SENTINEL = Instance("SENTINEL")
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 13)     this.games = mutableMapOf(Pair("SENTINEL", SENTINEL))
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 14)   }
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 15) 
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 16)   //class functions
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 17) 
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 18)   //generates a game instance and returns the code for that instance
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 19)   fun genInstance() : String {
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 20)     val charPool = "BCDFGHJKLMNPQRSTVWXZ"
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 21)     var randomString = ""
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 22) 
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 23)     //generate random strings until one is made that doesn't
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 24)     //match any current game instances
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 25)     while(games.get(randomString) != null) {
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 26) 
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 27)     randomString = (1..6)
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 28)     .map {kotlin.random.Random.nextInt(0, charPool.length) }
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 29)     .map(charPool::get)
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 30)     .joinToString("");
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 31)     }
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 32) 
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 33)     //generate instance and add it to current games active
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 34)     games.put(randomString, Instance(randomString))
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 35) 
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 36)     return randomString
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 37)   }
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 38) 
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 39)   //removes instance from all active games, returns true if successful
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 40)   fun deleteInstance(gameCode : String) : Boolean {
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 41) 
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 42)     if (games.remove(gameCode) == null) return false
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 43)     return true
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 44)   }
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 45) 
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 46)   //checks if instance exists, returns true if exists
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 47)   fun checkInstance(gameCode : String) : Boolean {
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 48)     return games.containsKey(gameCode)
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 49)   }
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 50) 
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 51)   //returns instance from all active instances CAN BE NULLABLE
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 52)   fun getInstance(gameCode : String) : Instance? {
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 53)     return games.get(gameCode)
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 54)   }
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 55) 
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 56)   //finds game from code, adds card to game, returns true if successful
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 57)   fun addCardToGame(gameCode : String, card : Card) : Boolean {
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 58) 
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 59)     if (games.get(gameCode) == null) return false
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 60)     return games.get(gameCode)!!.addCard(card)
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 61)   }
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 62) 
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 63)   //finds game from code, removes card from game, returns true if successful
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 64)   fun removeCardFromGame(gameCode : String, card : Card) : Boolean {
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 65) 
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 66)     if (games.get(gameCode) == null) return false
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 67)     return games.get(gameCode)!!.removeCard(card)
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 68)   }
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 69) }

-null-time-api-temp/InstanceClass.kt

8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400  1) import java.time.LocalDateTime
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400  2) 
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400  3) /* Card class, these are the cards that exist in every game
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400  4)  * each card contains an id unique to it, when it was made
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400  5)  * who made it, and what is on the card
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400  6)  */
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400  7) 
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400  8) class Card constructor (word: String, who: String) {
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400  9)   val word: String = word
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 10)   val who: String = who
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 11) 
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 12)   //record date and generate id
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 13)   val date = LocalDateTime.now()
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 14)   val id = kotlin.random.Random.nextLong(1, Long.MAX_VALUE)
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 15) }
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 16) 
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 17) /* Instance class, responsible for a game instance
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 18)  * contains all the cards present in a game and the
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 19)  * game code
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 20)  */
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 21) class Instance {
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 22) 
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 23)   val cards : MutableList<Card>
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 24)   val code: String
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 25) 
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 26)   constructor(code: String) {
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 27)     this.code = code
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 28)     this.cards = mutableListOf()
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 29)   }
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 30) 
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 31)   //add card to cards, returns if successful
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 32)   fun addCard(card: Card) : Boolean {
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 33)     return cards.add(card)
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 34)   }
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 35) 
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 36)   //remove card from cards, returns if successful
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 37)   fun removeCard(card: Card) : Boolean {
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 38)     return cards.remove(card)
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 39)   }
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 40) 
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 41)   //update card from cards, returns if successful
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 42)   fun updateCard(card: Card) : Boolean {
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 43) 
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 44)     //replace card with new one
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 45)     if (cards.remove(cards.find{it.id == card.id})) {
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 46)       cards.add(card)
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 47)       return true
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 48)     }
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 49)     return false
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 50)   }
8a0ceffb (Ryland-Seagraves 2022-10-27 12:39:26 -0400 51) }